# Copyright 2021 The Magma Authors.

# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("//bazel:third_party_repositories.bzl", "grpc")

################################################################################
# Python setup
################################################################################
# rules_python have to be imported before we call functions from @com_github_grpc_grpc
# and @rules_proto, because those will pull rules_python-0.5.0
http_archive(
   name = "rules_python",
   sha256 = "c03246c11efd49266e8e41e12931090b613e12a59e6f55ba2efd29a7cb8b4258",
   strip_prefix = "rules_python-0.11.0",
   url = "https://github.com/bazelbuild/rules_python/archive/refs/tags/0.11.0.tar.gz",
)

load("@rules_python//python:repositories.bzl", "python_register_toolchains")

python_register_toolchains(
    name = "python3",
    python_version = "3.8",
)

load("@python3//:defs.bzl", "interpreter")
load("@rules_python//python:pip.bzl", "pip_parse")

pip_parse(
    name = "python_deps",
    extra_pip_args = ["--require-hashes"],
    python_interpreter_target = interpreter,
    #python_interpreter = "python3",
    requirements_lock = "//bazel/external:requirements.txt",
    visibility = ["//visibility:public"],
)

load("@python_deps//:requirements.bzl", "install_deps")

install_deps()

load("//bazel:python_swagger.bzl", "load_swagger_repositories")

load_swagger_repositories()


### BUILDIFIER DEPENDENCIES
# See https://github.com/bazelbuild/buildtools/blob/master/buildifier/README.md
# buildifier is written in Go and hence needs rules_go to be built.
# See https://github.com/bazelbuild/rules_go for the up to date setup instructions.
http_archive(
    name = "io_bazel_rules_go",
    sha256 = "8e968b5fcea1d2d64071872b12737bbb5514524ee5f0a4f54f5920266c261acb",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/rules_go/releases/download/v0.28.0/rules_go-v0.28.0.zip",
        "https://github.com/bazelbuild/rules_go/releases/download/v0.28.0/rules_go-v0.28.0.zip",
    ],
)

http_archive(
    name = "bazel_gazelle",
    sha256 = "62ca106be173579c0a167deb23358fdfe71ffa1e4cfdddf5582af26520f1c66f",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/bazel-gazelle/releases/download/v0.23.0/bazel-gazelle-v0.23.0.tar.gz",
        "https://github.com/bazelbuild/bazel-gazelle/releases/download/v0.23.0/bazel-gazelle-v0.23.0.tar.gz",
    ],
)

load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies")
load("@io_bazel_rules_go//go:deps.bzl", "go_register_toolchains", "go_rules_dependencies")
load("//bazel:go_repositories.bzl", "go_repositories")

# gazelle:repository_macro bazel/go_repositories.bzl%go_repositories
go_repositories()

go_rules_dependencies()

go_register_toolchains(version = "1.17")

gazelle_dependencies()

# If you use WORKSPACE.bazel, use the following line instead of the bare gazelle_dependencies():
# gazelle_dependencies(go_repository_default_config = "@//:WORKSPACE.bazel")
gazelle_dependencies(go_repository_default_config = "@//:WORKSPACE.bazel")

# protobuf dependency covered below

http_archive(
    name = "com_github_bazelbuild_buildtools",
    sha256 = "7f43df3cca7bb4ea443b4159edd7a204c8d771890a69a50a190dc9543760ca21",
    strip_prefix = "buildtools-5.0.1",
    url = "https://github.com/bazelbuild/buildtools/archive/refs/tags/5.0.1.tar.gz",
)
### BUILDIFIER DEPENDENCIES

http_archive(
    name = "bazel_skylib",
    sha256 = "1c531376ac7e5a180e0237938a2536de0c54d93f5c278634818e0efc952dd56c",
    urls = [
        "https://github.com/bazelbuild/bazel-skylib/releases/download/1.0.3/bazel-skylib-1.0.3.tar.gz",
        "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.0.3/bazel-skylib-1.0.3.tar.gz",
    ],
)

load("@bazel_skylib//:workspace.bzl", "bazel_skylib_workspace")

bazel_skylib_workspace()

# rules_cc defines rules for generating C++ code from Protocol Buffers.
http_archive(
    name = "rules_cc",
    sha256 = "56ac9633c13d74cb71e0546f103ce1c58810e4a76aa8325da593ca4277908d72",
    strip_prefix = "rules_cc-40548a2974f1aea06215272d9c2b47a14a24e556",
    urls = ["https://github.com/bazelbuild/rules_cc/archive/40548a2974f1aea06215272d9c2b47a14a24e556.zip"],
)

load("@rules_cc//cc:repositories.bzl", "rules_cc_dependencies")

rules_cc_dependencies()

### PROTO / GRPC DEPENDENCIES ###
grpc()

load("@rules_proto_grpc//:repositories.bzl", "rules_proto_grpc_repos", "rules_proto_grpc_toolchains")

rules_proto_grpc_toolchains()

rules_proto_grpc_repos()

load("@rules_proto//proto:repositories.bzl", "rules_proto_dependencies", "rules_proto_toolchains")

rules_proto_dependencies()

rules_proto_toolchains()

load("@rules_proto_grpc//cpp:repositories.bzl", rules_proto_grpc_cpp_repos = "cpp_repos")

rules_proto_grpc_cpp_repos()

load("@com_github_grpc_grpc//bazel:grpc_deps.bzl", "grpc_deps")

grpc_deps()
### PROTO / GRPC DEPENDENCIES ###

load("//bazel:cpp_repositories.bzl", "cpp_repositories")

cpp_repositories()

# To get Folly to build reliably, we're going to pull it from the underlying system
# This assumes that the build is done in the Docker container or VBox VM
new_local_repository(
    name = "system_libraries",
    build_file = "//bazel/external:system_libraries.BUILD",
    path = "/",
)

new_local_repository(
    name = "s1ap_test_util",
    build_file = "//bazel/external:s1ap_test_util.BUILD",
    path = "/",
)


load("//bazel:python_swagger.bzl", "load_swagger_repositories")

load_swagger_repositories()

load("//bazel:python_repositories.bzl", "python_repositories")

python_repositories()

# TODO: GH13522 upgrade to >0.7.0 when landed - see issue
http_archive(
    name = "rules_pkg",
    sha256 = "bdac8d3d178467c89f246e1e894b59c26c784569e91798901fb81291de834708",
    strip_prefix = "rules_pkg-7f7bcf9c93bed9ee693b5bfedde5d72f9a2d6ea4",
    urls = [
        "https://github.com/bazelbuild/rules_pkg/archive/7f7bcf9c93bed9ee693b5bfedde5d72f9a2d6ea4.zip",
    ],
)

load("@rules_pkg//:deps.bzl", "rules_pkg_dependencies")

rules_pkg_dependencies()

#######################################################################
# rules_docker for creating docker images
#######################################################################
http_archive(
    name = "io_bazel_rules_docker",
    sha256 = "b1e80761a8a8243d03ebca8845e9cc1ba6c82ce7c5179ce2b295cd36f7e394bf",
    urls = ["https://github.com/bazelbuild/rules_docker/releases/download/v0.25.0/rules_docker-v0.25.0.tar.gz"],
)

load(
    "@io_bazel_rules_docker//repositories:repositories.bzl",
    container_repositories = "repositories",
)

container_repositories()

load(
    "@io_bazel_rules_docker//python3:image.bzl",
    _py_image_repos = "repositories",
)

_py_image_repos()

load(
    "@io_bazel_rules_docker//cc:image.bzl",
    _cc_image_repos = "repositories",
)

_cc_image_repos()

load(
    "@io_bazel_rules_docker//container:container.bzl",
    "container_pull",
)

# in order to determine the digest I first did as described here: https://stackoverflow.com/a/33511811
# docker inspect --format='{{ index .RepoDigests 0}}' ubuntu:focal # View sha256 of the ubuntu:focal image

# That led to the following error:
# Error in fail: SHA256 of the image specified does not match SHA256 of the
# pulled image. Expected
# sha256:af5efa9c28de78b754777af9b4d850112cad01899a5d37d2617bb94dc63a49aa, but
# pulled image with
# sha256:a06ae92523384c2cd182dcfe7f8b2bf09075062e937d5653d7d0db0375ad2221. It is
# possible that you have a pin to a manifest list which points to another image,
# if so, change the pin to point at the actual Docker image

# As described here https://github.com/bazelbuild/rules_docker/issues/1125#issuecomment-528056250
# rules_docker used to allow Manifest SHAs and resolve the image, but discontinued that.
# The same comment suggests to
# docker manifest inspect ubuntu@sha256:af5efa9c28de78b754777af9b4d850112cad01899a5d37d2617bb94dc63a49aa
# -> this gives a lit of different architectures.
# For amd64 we get sha256:a06ae92523384c2cd182dcfe7f8b2bf09075062e937d5653d7d0db0375ad2221

container_pull(
    name = "ubuntu_focal",
    architecture = "amd64",
    digest = "sha256:a06ae92523384c2cd182dcfe7f8b2bf09075062e937d5653d7d0db0375ad2221",
    registry = "index.docker.io",
    repository = "library/ubuntu",
)


# https://github.com/GoogleContainerTools/distroless has an interesting approach to installing .deb packages:
# .deb files are downloaded via repository rules. Instead of installing the packages with apt which would
# require to run commands inside the docker container (similar to Dockerfiles), they only extract the .deb
# files.
# That means pre- and post-install scripts are not executed. This seems to work well for them, so we should
# give it a try, as this approach has two tremendous advantages:
#   * Bazel keeps track of the .deb files, including checking their checksums.
#     This is probably great for reproducability and cacheability.
#   * We do not require docker in our bazel builds.

# TODO: look at https://github.com/GoogleContainerTools/distroless/tree/9c262f5114758891b8e32092aa844de5922342b7/debian_package_manager

http_archive(
    name = "distroless",
    sha256 = "13ed5c03baaf41350dbaa9c28b20e932c613ad814dabd2442a98ce42dd5460fe",
    strip_prefix = "distroless-2e6017a0bd179f7dec6d8c147ffd03e4d5618e47",
    urls = [
        "https://github.com/jheidbrink/distroless/archive/2e6017a0bd179f7dec6d8c147ffd03e4d5618e47.zip",
    ],
)

load("//bazel:distroless.bzl", "define_distroless_packages")

define_distroless_packages()