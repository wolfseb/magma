# Copyright 2021 The Magma Authors.

# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library")
load("@io_bazel_rules_docker//container:container.bzl", "container_image")
load("@io_bazel_rules_docker//docker/package_managers:download_pkgs.bzl", "download_pkgs")
load("@io_bazel_rules_docker//docker/package_managers:install_pkgs.bzl", "install_pkgs")
load("@io_bazel_rules_docker//cc:image.bzl", "cc_image")


package(default_visibility = ["//lte/gateway/c/li_agent/src:__subpackages__"])

cc_binary(
    name = "liagentd",
    srcs = ["main.cpp"],
    visibility = ["//lte/gateway/release:__pkg__"],
    deps = [
        ":interface_monitor",
        "//orc8r/gateway/c/common/config:mconfig_loader",
        "//orc8r/gateway/c/common/logging",
        "//orc8r/gateway/c/common/sentry:sentry_wrapper",
        "//orc8r/gateway/c/common/service303",
    ],
)

download_pkgs(
    name = "liagent_requisites",
    image_tar = "@ubuntu_focal//image",
    packages = [
        "libpcap0.8",
        "libcurl4",
        "libgflags2.2",
        "libunwind8",
        ],
)

install_pkgs(
    name = "liagentd_requisites_layer",
    image_tar = "@ubuntu_focal//image",
    installables_tar = ":liagent_requisites.tar",
    installation_cleanup_commands = "rm -rf /var/lib/apt/lists/*",
    output_image_name = "liagentd_requisites_layer",
)

container_image(
    name = "liagentd_base_image",
    base = ":liagentd_requisites_layer.tar",
)

cc_image(
    name = "liagentd_image",
    binary = ":liagentd",
    base = ":liagentd_base_image",
)

cc_library(
    name = "interface_monitor",
    srcs = ["InterfaceMonitor.cpp"],
    hdrs = ["InterfaceMonitor.hpp"],
    deps = [
        ":pdu_generator",
        "@system_libraries//:libpcap",
    ],
)

cc_library(
    name = "pdu_generator",
    srcs = ["PDUGenerator.cpp"],
    hdrs = ["PDUGenerator.hpp"],
    deps = [
        ":mobilityd_client",
        ":proxy_connector",
        ":utilities",
        "//lte/protos:mconfigs_cpp_proto",
        "//orc8r/gateway/c/common/config:mconfig_loader",
        "@libtins",
        "@system_libraries//:libuuid",
    ],
)

cc_library(
    name = "proxy_connector",
    srcs = ["ProxyConnector.cpp"],
    hdrs = ["ProxyConnector.hpp"],
    deps = [
        "//orc8r/gateway/c/common/logging",
    ],
)

cc_library(
    name = "mobilityd_client",
    srcs = ["MobilitydClient.cpp"],
    hdrs = ["MobilitydClient.hpp"],
    deps = [
        "//lte/protos:mobilityd_cpp_grpc",
        "//orc8r/gateway/c/common/async_grpc:async_grpc_receiver",
        "//orc8r/gateway/c/common/service_registry",
    ],
)

cc_library(
    name = "utilities",
    srcs = ["Utilities.cpp"],
    hdrs = ["Utilities.hpp"],
    deps = [
        "//lte/protos:mconfigs_cpp_proto",
        "//orc8r/gateway/c/common/config:mconfig_loader",
        "//orc8r/gateway/c/common/service303",
    ],
)
